{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\nvar Infecter = /*#__PURE__*/function () {\n  function Infecter(container) {\n    _classCallCheck(this, Infecter);\n    this.container = container;\n  }\n  _createClass(Infecter, [{\n    key: \"startInfection\",\n    value: function startInfection(particle, stage) {\n      var options = this.container.actualOptions,\n        stages = options.infection.stages,\n        stagesCount = stages.length;\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n      particle.infection.delay = 0;\n      particle.infection.delayStage = stage;\n    }\n  }, {\n    key: \"updateInfectionStage\",\n    value: function updateInfectionStage(particle, stage) {\n      var options = this.container.actualOptions,\n        stagesCount = options.infection.stages.length;\n      if (stage > stagesCount || stage < 0 || particle.infection.stage !== undefined && particle.infection.stage > stage) {\n        return;\n      }\n      particle.infection.stage = stage;\n      particle.infection.time = 0;\n    }\n  }, {\n    key: \"updateInfection\",\n    value: function updateInfection(particle, delta) {\n      var options = this.container.actualOptions,\n        infection = options.infection,\n        stages = options.infection.stages,\n        stagesCount = stages.length;\n      if (particle.infection.delay !== undefined && particle.infection.delayStage !== undefined) {\n        var stage = particle.infection.delayStage;\n        if (stage > stagesCount || stage < 0) {\n          return;\n        }\n        if (particle.infection.delay >= infection.delay * 1000) {\n          particle.infection.stage = stage;\n          particle.infection.time = 0;\n          delete particle.infection.delay;\n          delete particle.infection.delayStage;\n        } else {\n          particle.infection.delay += delta;\n        }\n      } else {\n        delete particle.infection.delay;\n        delete particle.infection.delayStage;\n      }\n      if (particle.infection.stage !== undefined && particle.infection.time !== undefined) {\n        var infectionStage = stages[particle.infection.stage];\n        if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n          if (particle.infection.time > infectionStage.duration * 1000) {\n            this.nextInfectionStage(particle);\n          } else {\n            particle.infection.time += delta;\n          }\n        } else {\n          particle.infection.time += delta;\n        }\n      } else {\n        delete particle.infection.stage;\n        delete particle.infection.time;\n      }\n    }\n  }, {\n    key: \"nextInfectionStage\",\n    value: function nextInfectionStage(particle) {\n      var options = this.container.actualOptions,\n        stagesCount = options.infection.stages.length;\n      if (stagesCount <= 0 || particle.infection.stage === undefined) {\n        return;\n      }\n      particle.infection.time = 0;\n      if (stagesCount <= ++particle.infection.stage) {\n        if (options.infection.cure) {\n          delete particle.infection.stage;\n          delete particle.infection.time;\n          return;\n        } else {\n          particle.infection.stage = 0;\n          particle.infection.time = 0;\n        }\n      }\n    }\n  }]);\n  return Infecter;\n}();\nexports.Infecter = Infecter;","map":null,"metadata":{},"sourceType":"script"}