{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/home/lighthouse/newfile/react-resume/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Circle = void 0;\nvar Range_1 = require(\"./Range\");\nvar Circle = /*#__PURE__*/function (_Range_1$Range) {\n  _inherits(Circle, _Range_1$Range);\n  function Circle(x, y, radius) {\n    var _this;\n    _classCallCheck(this, Circle);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Circle).call(this, x, y));\n    _this.radius = radius;\n    return _this;\n  }\n  _createClass(Circle, [{\n    key: \"contains\",\n    value: function contains(point) {\n      var d = Math.pow(point.x - this.position.x, 2) + Math.pow(point.y - this.position.y, 2);\n      return d <= this.radius * this.radius;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range) {\n      var rect = range;\n      var circle = range;\n      var pos1 = this.position;\n      var pos2 = range.position;\n      var xDist = Math.abs(pos2.x - pos1.x);\n      var yDist = Math.abs(pos2.y - pos1.y);\n      var r = this.radius;\n      if (circle.radius !== undefined) {\n        var rSum = r + circle.radius;\n        var dist = Math.sqrt(xDist * xDist + yDist + yDist);\n        return rSum > dist;\n      } else if (rect.size !== undefined) {\n        var w = rect.size.width;\n        var h = rect.size.height;\n        var edges = Math.pow(xDist - w, 2) + Math.pow(yDist - h, 2);\n        if (xDist > r + w || yDist > r + h) {\n          return false;\n        }\n        if (xDist <= w || yDist <= h) {\n          return true;\n        }\n        return edges <= r * r;\n      }\n      return false;\n    }\n  }]);\n  return Circle;\n}(Range_1.Range);\nexports.Circle = Circle;","map":null,"metadata":{},"sourceType":"script"}